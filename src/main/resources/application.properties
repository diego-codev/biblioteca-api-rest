api.security.token.secret=${JWT_SECRET:my-secret-key}
spring.application.name=biblioteca-api

#Configuracao para explicar ao Spring que o bd � o postgresql
spring.datasource.driver-class-name=org.postgresql.Driver

# Conexão com banco de dados (permite override via variáveis de ambiente ao usar Docker)
spring.datasource.url=${DB_URL:jdbc:postgresql://localhost:5432/biblioteca}
spring.datasource.username=${DB_USER:postgres}
spring.datasource.password=${DB_PASSWORD:Dao@2024}

#Configura��o do Hibernate que mostra o sql gerado(�til para debug)
spring.jpa.show-sql=true

#Configura��o do Hibernate que decide o que fazer com as tabelas ao iniciar a aplicacao
# Em ambiente de demonstração mantido 'update'. Em produção recomendaria 'validate' ou uso de migrations.
spring.jpa.hibernate.ddl-auto=update

#Configura��o do Hibernate que faz "Large Objects" funcionarem sem serem transacionados
spring.jpa.properties.hibernate.jdbc.lob.non_contextual_creation=true

#Configura��o do Hibernate que desabilita o "Open Session in View" que eh um anti-pattern
spring.jpa.open-in-view=false

# Swagger / OpenAPI
springdoc.swagger-ui.use-root-path=true
# Caso futuramente prefixe endpoints, ajuste abaixo (mantido sem filtro agora)
# springdoc.paths-to-match=/

# Actuator (health usado pelo Docker HEALTHCHECK)
management.endpoints.web.exposure.include=health
management.endpoint.health.probes.enabled=true
management.endpoint.health.show-details=never

